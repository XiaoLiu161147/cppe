<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="libcppe_8cc" kind="file" language="C++">
    <compoundname>libcppe.cc</compoundname>
    <includes local="no">cassert</includes>
    <includes local="no">iostream</includes>
    <includes refid="libcppe_8hh" local="yes">libcppe.hh</includes>
    <includes refid="electric__fields_8hh" local="yes">core/electric_fields.hh</includes>
    <includes refid="multipole__expansion_8hh" local="yes">core/multipole_expansion.hh</includes>
    <includes refid="potfile__reader_8hh" local="yes">utils/potfile_reader.hh</includes>
    <incdepgraph>
      <node id="197">
        <label>multipole_expansion.hh</label>
        <link refid="multipole__expansion_8hh"/>
        <childnode refid="198" relation="include">
        </childnode>
        <childnode refid="196" relation="include">
        </childnode>
        <childnode refid="193" relation="include">
        </childnode>
      </node>
      <node id="196">
        <label>molecule.hh</label>
        <link refid="molecule_8hh"/>
        <childnode refid="192" relation="include">
        </childnode>
        <childnode refid="194" relation="include">
        </childnode>
      </node>
      <node id="200">
        <label>utils/potfile_reader.hh</label>
        <link refid="potfile__reader_8hh"/>
        <childnode refid="189" relation="include">
        </childnode>
        <childnode refid="191" relation="include">
        </childnode>
        <childnode refid="192" relation="include">
        </childnode>
        <childnode refid="193" relation="include">
        </childnode>
      </node>
      <node id="188">
        <label>cassert</label>
      </node>
      <node id="193">
        <label>core/multipole.hh</label>
        <link refid="multipole_8hh"/>
        <childnode refid="194" relation="include">
        </childnode>
        <childnode refid="189" relation="include">
        </childnode>
        <childnode refid="192" relation="include">
        </childnode>
      </node>
      <node id="194">
        <label>Eigen/Core</label>
      </node>
      <node id="191">
        <label>string</label>
      </node>
      <node id="198">
        <label>math.hh</label>
        <link refid="math_8hh"/>
        <childnode refid="194" relation="include">
        </childnode>
        <childnode refid="192" relation="include">
        </childnode>
      </node>
      <node id="187">
        <label>/Users/maxscheurer/Projects/cppe/cppe/libcppe.cc</label>
        <link refid="libcppe_8cc"/>
        <childnode refid="188" relation="include">
        </childnode>
        <childnode refid="189" relation="include">
        </childnode>
        <childnode refid="190" relation="include">
        </childnode>
        <childnode refid="195" relation="include">
        </childnode>
        <childnode refid="197" relation="include">
        </childnode>
        <childnode refid="200" relation="include">
        </childnode>
      </node>
      <node id="199">
        <label>pe_options.hh</label>
        <link refid="pe__options_8hh"/>
        <childnode refid="191" relation="include">
        </childnode>
      </node>
      <node id="190">
        <label>libcppe.hh</label>
        <link refid="libcppe_8hh"/>
        <childnode refid="191" relation="include">
        </childnode>
        <childnode refid="192" relation="include">
        </childnode>
        <childnode refid="193" relation="include">
        </childnode>
      </node>
      <node id="192">
        <label>vector</label>
      </node>
      <node id="189">
        <label>iostream</label>
      </node>
      <node id="195">
        <label>core/electric_fields.hh</label>
        <link refid="electric__fields_8hh"/>
        <childnode refid="196" relation="include">
        </childnode>
        <childnode refid="197" relation="include">
        </childnode>
        <childnode refid="199" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacelibcppe">libcppe</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#include<sp/>&quot;interface.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="libcppe_8hh" kindref="compound">libcppe.hh</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="electric__fields_8hh" kindref="compound">core/electric_fields.hh</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="multipole__expansion_8hh" kindref="compound">core/multipole_expansion.hh</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="potfile__reader_8hh" kindref="compound">utils/potfile_reader.hh</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacelibcppe" kindref="compound">libcppe</ref><sp/>{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14" refid="classlibcppe_1_1_c_p_p_e_1a00df555829f44da470396eb897c91523" refkind="member"><highlight class="normal"><ref refid="classlibcppe_1_1_c_p_p_e_1a00df555829f44da470396eb897c91523" kindref="member">CPPE::CPPE</ref>()<sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><ref refid="classlibcppe_1_1_c_p_p_e_1a802bca8cb5bbe9e8f0b6aff2c96996d7" kindref="member">m_gen1int_initialized</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><ref refid="classlibcppe_1_1_c_p_p_e_1a074fd2f8e6a8323a2d19cbd0ad87b5ac" kindref="member">m_pe_initialized</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="17"><highlight class="normal">}</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19" refid="classlibcppe_1_1_c_p_p_e_1aae1b8d61cb7305011f3ac2f5b870a622" refkind="member"><highlight class="normal"><ref refid="classlibcppe_1_1_c_p_p_e_1aae1b8d61cb7305011f3ac2f5b870a622" kindref="member">CPPE::~CPPE</ref>()<sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>(m_gen1int_initialized<sp/>&amp;&amp;<sp/>m_pe_initialized)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>finalize_all();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal">}</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>void<sp/>CPPE::initialize_gen1int(int<sp/>natoms,<sp/>int<sp/>nshells,<sp/>const<sp/>double<sp/>*coords,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>double<sp/>*charges)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>gen1int_api_initialize(natoms,<sp/>nshells,<sp/>coords,<sp/>charges);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>m_gen1int_initialized<sp/>=<sp/>true;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//<sp/>void<sp/>CPPE::gen1int_add_shell(int<sp/>spher_gto,<sp/>int<sp/>idx_center,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>double<sp/>*coord_center,<sp/>int<sp/>ang_num,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>num_prim,<sp/>const<sp/>double<sp/>*exponents,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>num_contr,<sp/>const<sp/>double<sp/>*contr_coef)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>gen1int_api_add_shell(spher_gto,<sp/>idx_center,<sp/>coord_center,<sp/>ang_num,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>num_prim,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exponents,<sp/>num_contr,<sp/>contr_coef);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">//<sp/>void<sp/>CPPE::gen1int_print_shells()<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>if<sp/>(!m_gen1int_initialized)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>throw<sp/>std::runtime_error(&quot;Gen1int<sp/>needs<sp/>to<sp/>be<sp/>initialized<sp/>before&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;calling<sp/>print_shells&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>print_shells();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">//<sp/>void<sp/>CPPE::initialize_pelib(PeOptions<sp/>&amp;options,<sp/>int<sp/>natoms,<sp/>int<sp/>nbas,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>double<sp/>*coords,<sp/>const<sp/>double<sp/>*charges)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>if<sp/>(!m_gen1int_initialized)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>throw<sp/>std::runtime_error(&quot;Gen1int<sp/>needs<sp/>to<sp/>be<sp/>initialized&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;before<sp/>calling<sp/>PElib&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>m_natoms<sp/>=<sp/>natoms;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>m_nbas<sp/>=<sp/>nbas;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>m_nnbas<sp/>=<sp/>nbas<sp/>*<sp/>(nbas<sp/>+<sp/>1)<sp/>/<sp/>2;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>assert(options.potfile.size()<sp/>&lt;<sp/>80);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>pe_set_potfile(options.potfile.c_str(),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_cast&lt;int&gt;(options.potfile.size()));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>pe_set_border_options(options.pe_border,<sp/>options.border_options.rmin,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>options.border_options.border_type,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>options.border_options.redist_pol</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>-options.border_options.redist_order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>options.border_options.redist_order,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>options.border_options.nredist);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>pe_interface_init(natoms,<sp/>coords,<sp/>charges);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>m_pe_initialized<sp/>=<sp/>true;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="comment">//<sp/>void<sp/>CPPE::call_pe_energy(const<sp/>double<sp/>*densmat)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>if<sp/>(!m_gen1int_initialized<sp/>||<sp/>!m_pe_initialized)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>throw<sp/>std::runtime_error(</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Gen1int<sp/>and<sp/>PElib<sp/>need<sp/>to<sp/>be<sp/>initialized<sp/>before<sp/>calling<sp/>PElib&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>pe_interface_energy(densmat,<sp/>m_nbas,<sp/>m_nnbas);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="comment">//<sp/>void<sp/>CPPE::call_pe_pol_energy(const<sp/>double<sp/>*densmat,<sp/>double<sp/>*energy)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>if<sp/>(!m_gen1int_initialized<sp/>||<sp/>!m_pe_initialized)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>throw<sp/>std::runtime_error(</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Gen1int<sp/>and<sp/>PElib<sp/>need<sp/>to<sp/>be<sp/>initialized<sp/>before<sp/>calling<sp/>PElib&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>pe_interface_pol_energy(densmat,<sp/>m_nbas,<sp/>m_nnbas,<sp/>energy);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="comment">//<sp/>void<sp/>CPPE::call_full_fock(const<sp/>double<sp/>*densmat,<sp/>double<sp/>*fockmat,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>*energy)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>if<sp/>(!m_gen1int_initialized<sp/>||<sp/>!m_pe_initialized)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>throw<sp/>std::runtime_error(</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Gen1int<sp/>and<sp/>PElib<sp/>need<sp/>to<sp/>be<sp/>initialized<sp/>before<sp/>calling<sp/>PElib&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>pe_interface_fock(densmat,<sp/>m_nbas,<sp/>m_nnbas,<sp/>fockmat,<sp/>energy);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95" refid="classlibcppe_1_1_c_p_p_e_1aaa7a8a306e74ebaf6785dfa22c14e44c" refkind="member"><highlight class="normal">std::vector&lt;Potential&gt;<sp/><ref refid="classlibcppe_1_1_c_p_p_e_1aaa7a8a306e74ebaf6785dfa22c14e44c" kindref="member">CPPE::read_potfile</ref>(std::string<sp/>potfile_name)<sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><ref refid="classlibcppe_1_1_potfile_reader" kindref="compound">PotfileReader</ref><sp/>reader(potfile_name);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>std::vector&lt;Potential&gt;<sp/>result<sp/>=<sp/>reader.<ref refid="classlibcppe_1_1_potfile_reader_1a4f9a3c16cc038583a5b5312ad120294f" kindref="member">read</ref>();</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>assert(result.size()<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="100"><highlight class="normal">}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>libcppe</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/maxscheurer/Projects/cppe/cppe/libcppe.cc"/>
  </compounddef>
</doxygen>
