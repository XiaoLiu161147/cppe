<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="export__molecule_8cc" kind="file" language="C++">
    <compoundname>export_molecule.cc</compoundname>
    <includes local="no">pybind11/eigen.h</includes>
    <includes local="no">pybind11/pybind11.h</includes>
    <includes local="no">pybind11/stl.h</includes>
    <includes local="no">pybind11/stl_bind.h</includes>
    <includes refid="molecule_8hh" local="yes">../core/molecule.hh</includes>
    <incdepgraph>
      <node id="241">
        <label>../core/molecule.hh</label>
        <link refid="molecule_8hh"/>
        <childnode refid="242" relation="include">
        </childnode>
        <childnode refid="243" relation="include">
        </childnode>
      </node>
      <node id="243">
        <label>Eigen/Core</label>
      </node>
      <node id="237">
        <label>pybind11/eigen.h</label>
      </node>
      <node id="242">
        <label>vector</label>
      </node>
      <node id="238">
        <label>pybind11/pybind11.h</label>
      </node>
      <node id="236">
        <label>/Users/maxscheurer/Projects/cppe/cppe/pycppe/export_molecule.cc</label>
        <link refid="export__molecule_8cc"/>
        <childnode refid="237" relation="include">
        </childnode>
        <childnode refid="238" relation="include">
        </childnode>
        <childnode refid="239" relation="include">
        </childnode>
        <childnode refid="240" relation="include">
        </childnode>
        <childnode refid="241" relation="include">
        </childnode>
      </node>
      <node id="240">
        <label>pybind11/stl_bind.h</label>
      </node>
      <node id="239">
        <label>pybind11/stl.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="export__molecule_8cc_1a1d549cd4aa88d6b91b78a552a636275d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void export_molecule</definition>
        <argsstring>(py::module &amp;m)</argsstring>
        <name>export_molecule</name>
        <param>
          <type>py::module &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/maxscheurer/Projects/cppe/cppe/pycppe/export_molecule.cc" line="10" column="1" bodyfile="/Users/maxscheurer/Projects/cppe/cppe/pycppe/export_molecule.cc" bodystart="10" bodyend="23"/>
        <references refid="structlibcppe_1_1_atom_1a7d69b84e07a95afdaf031d0c8bfd6194" compoundref="molecule_8hh" startline="11">libcppe::Atom::atomic_number</references>
        <references refid="structlibcppe_1_1_atom_1addcaec69596bfc6e69dae360a29fc9c9" compoundref="molecule_8hh" startline="12">libcppe::Atom::charge</references>
        <references refid="structlibcppe_1_1_atom_1a4f455271506d6abd6d7aad6802bab100" compoundref="molecule_8hh" startline="13">libcppe::Atom::m_x</references>
        <references refid="structlibcppe_1_1_atom_1ab83c5d9e9a576fca8f9be4f007935678" compoundref="molecule_8hh" startline="13">libcppe::Atom::m_y</references>
        <references refid="structlibcppe_1_1_atom_1a9871d78702db2db2c2c3bba819f13bee" compoundref="molecule_8hh" startline="13">libcppe::Atom::m_z</references>
        <references refid="structlibcppe_1_1_atom_1aa897a7ae285f6e5a766e5918d4f5fe4f" compoundref="molecule_8hh" startline="20" endline="20">libcppe::Atom::get_pos</references>
        <referencedby refid="pycppe_8cc_1aede4ed36a00185bbc1f705fc2add7f46" compoundref="pycppe_8cc" startline="13" endline="22">PYBIND11_MODULE</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;pybind11/eigen.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;pybind11/pybind11.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;pybind11/stl.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;pybind11/stl_bind.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../core/molecule.hh&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">py<sp/>=<sp/>pybind11;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10" refid="pycppe_8cc_1a66df1935ea84ab1aa70f1bbc941a7a56" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="export__molecule_8cc_1a1d549cd4aa88d6b91b78a552a636275d" kindref="member">export_molecule</ref>(py::module<sp/>&amp;m)<sp/>{</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>libcppe::Atom</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/>py::class_&lt;libcppe::Atom&gt;<sp/>atom(m,<sp/></highlight><highlight class="stringliteral">&quot;Atom&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Atom<sp/>class&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/>atom.def(py::init&lt;int,<sp/>double,<sp/>double,<sp/>double&gt;())</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.def_readwrite(</highlight><highlight class="stringliteral">&quot;atomic_number&quot;</highlight><highlight class="normal">,<sp/>&amp;<ref refid="structlibcppe_1_1_atom_1a7d69b84e07a95afdaf031d0c8bfd6194" kindref="member">libcppe::Atom::atomic_number</ref>)</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.def_readwrite(</highlight><highlight class="stringliteral">&quot;charge&quot;</highlight><highlight class="normal">,<sp/>&amp;<ref refid="structlibcppe_1_1_atom_1addcaec69596bfc6e69dae360a29fc9c9" kindref="member">libcppe::Atom::charge</ref>)</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.def_readwrite(</highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">,<sp/>&amp;<ref refid="structlibcppe_1_1_atom_1a4f455271506d6abd6d7aad6802bab100" kindref="member">libcppe::Atom::m_x</ref>)</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.def_readwrite(</highlight><highlight class="stringliteral">&quot;y&quot;</highlight><highlight class="normal">,<sp/>&amp;<ref refid="structlibcppe_1_1_atom_1ab83c5d9e9a576fca8f9be4f007935678" kindref="member">libcppe::Atom::m_y</ref>)</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.def_readwrite(</highlight><highlight class="stringliteral">&quot;z&quot;</highlight><highlight class="normal">,<sp/>&amp;<ref refid="structlibcppe_1_1_atom_1a9871d78702db2db2c2c3bba819f13bee" kindref="member">libcppe::Atom::m_z</ref>)</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;get_position&quot;</highlight><highlight class="normal">,<sp/>&amp;<ref refid="structlibcppe_1_1_atom_1aa897a7ae285f6e5a766e5918d4f5fe4f" kindref="member">libcppe::Atom::get_pos</ref>);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>libcppe::Molecule</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/>py::bind_vector&lt;libcppe::Molecule&gt;(m,<sp/></highlight><highlight class="stringliteral">&quot;Molecule&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="23"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Users/maxscheurer/Projects/cppe/cppe/pycppe/export_molecule.cc"/>
  </compounddef>
</doxygen>
