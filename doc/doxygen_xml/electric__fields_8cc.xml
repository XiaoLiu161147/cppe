<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="electric__fields_8cc" kind="file" language="C++">
    <compoundname>electric_fields.cc</compoundname>
    <includes local="no">Eigen/Dense</includes>
    <includes local="no">iomanip</includes>
    <includes refid="electric__fields_8hh" local="yes">electric_fields.hh</includes>
    <includes refid="math_8hh" local="yes">math.hh</includes>
    <incdepgraph>
      <node id="37">
        <label>iomanip</label>
      </node>
      <node id="42">
        <label>multipole_expansion.hh</label>
        <link refid="multipole__expansion_8hh"/>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>molecule.hh</label>
        <link refid="molecule_8hh"/>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>multipole.hh</label>
        <link refid="multipole_8hh"/>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>Eigen/Core</label>
      </node>
      <node id="47">
        <label>string</label>
      </node>
      <node id="43">
        <label>math.hh</label>
        <link refid="math_8hh"/>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>Eigen/Dense</label>
      </node>
      <node id="46">
        <label>pe_options.hh</label>
        <link refid="pe__options_8hh"/>
        <childnode refid="47" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>vector</label>
      </node>
      <node id="45">
        <label>iostream</label>
      </node>
      <node id="35">
        <label>/Users/maxscheurer/Projects/cppe/cppe/core/electric_fields.cc</label>
        <link refid="electric__fields_8cc"/>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>electric_fields.hh</label>
        <link refid="electric__fields_8hh"/>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacelibcppe">libcppe</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;Eigen/Dense&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iomanip&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="electric__fields_8hh" kindref="compound">electric_fields.hh</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="math_8hh" kindref="compound">math.hh</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacelibcppe" kindref="compound">libcppe</ref><sp/>{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9" refid="classlibcppe_1_1_nuclear_fields_1a9f49933ca9e5135bc602cbd66bbcdf33" refkind="member"><highlight class="normal">Eigen::VectorXd<sp/><ref refid="classlibcppe_1_1_nuclear_fields_1a9f49933ca9e5135bc602cbd66bbcdf33" kindref="member">NuclearFields::compute</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>damp_core)<sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(damp_core)<sp/>{</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;damping<sp/>not<sp/>implemented&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/>std::vector&lt;Eigen::MatrixXi&gt;<sp/>Tk_coeffs<sp/>=<sp/><ref refid="namespacelibcppe_1a97556873162363c2affbca8253042729" kindref="member">Tk_coefficients</ref>(5);</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/>Eigen::VectorXd<sp/>nuc_fields<sp/>=<sp/><sp/>Eigen::VectorXd::Zero(3<sp/>*<sp/><ref refid="classlibcppe_1_1_nuclear_fields_1af1468ec6b031905705c76e25de8762c0" kindref="member">m_n_polsites</ref>);</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>omp<sp/>parallel<sp/>for<sp/>firstprivate(Tk_coeffs)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classlibcppe_1_1_nuclear_fields_1af1468ec6b031905705c76e25de8762c0" kindref="member">m_n_polsites</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>site_counter<sp/>=<sp/>3<sp/>*<sp/>i;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlibcppe_1_1_potential" kindref="compound">Potential</ref><sp/>&amp;potential<sp/>=<sp/><ref refid="classlibcppe_1_1_nuclear_fields_1a8aa1c41f71b1c6d349a176054edfd464" kindref="member">m_polsites</ref>[i];</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>site_position<sp/>=<sp/>potential.<ref refid="classlibcppe_1_1_potential_1ac2e845f27e6742134a1d57a5f2b66db5" kindref="member">get_site_position</ref>();</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;atom<sp/>:<sp/><ref refid="classlibcppe_1_1_nuclear_fields_1ae50ea454a1bf747dc29dc4d4241b1ada" kindref="member">m_mol</ref>)<sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>core_position<sp/>=<sp/>atom.get_pos();</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>diff<sp/>=<sp/>site_position<sp/>-<sp/>core_position;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::VectorXd<sp/>Tms<sp/>=<sp/><ref refid="namespacelibcppe_1a3a5eca65d4ae00dea484f437797349a6" kindref="member">Tk_tensor</ref>(1,<sp/>diff,<sp/>Tk_coeffs);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nuc_fields(site_counter)<sp/>-=<sp/>atom.charge<sp/>*<sp/>Tms(0);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nuc_fields(site_counter<sp/>+<sp/>1)<sp/>-=<sp/>atom.charge<sp/>*<sp/>Tms(1);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nuc_fields(site_counter<sp/>+<sp/>2)<sp/>-=<sp/>atom.charge<sp/>*<sp/>Tms(2);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nuc_fields;</highlight></codeline>
<codeline lineno="30"><highlight class="normal">}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32" refid="classlibcppe_1_1_multipole_fields_1a5f2f55413be903581cf92e26b00a65c1" refkind="member"><highlight class="normal">Eigen::VectorXd<sp/><ref refid="classlibcppe_1_1_multipole_fields_1a5f2f55413be903581cf92e26b00a65c1" kindref="member">MultipoleFields::compute</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>damp)<sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(damp)<sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;damping<sp/>not<sp/>implemented&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>std::vector&lt;Eigen::MatrixXi&gt;<sp/>Tk_coeffs<sp/>=<sp/><ref refid="namespacelibcppe_1a97556873162363c2affbca8253042729" kindref="member">Tk_coefficients</ref>(5);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>Eigen::VectorXd<sp/>mult_fields<sp/>=<sp/>Eigen::VectorXd::Zero(3<sp/>*<sp/><ref refid="classlibcppe_1_1_multipole_fields_1ae990445b58a37798f45aaf73598861f2" kindref="member">m_n_polsites</ref>);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Field<sp/>at<sp/>site<sp/>of<sp/>potential1<sp/>caused<sp/>by<sp/>all<sp/>other<sp/>sites<sp/>(also<sp/>non-polarizable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">//<sp/>sites!!!)<sp/>size_t<sp/>site_counter<sp/>=<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>omp<sp/>parallel<sp/>for<sp/>firstprivate(Tk_coeffs)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classlibcppe_1_1_multipole_fields_1ae990445b58a37798f45aaf73598861f2" kindref="member">m_n_polsites</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>site_counter<sp/>=<sp/>3<sp/>*<sp/>i;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlibcppe_1_1_potential" kindref="compound">Potential</ref><sp/>&amp;potential1<sp/>=<sp/><ref refid="classlibcppe_1_1_multipole_fields_1adbed71fcf2642d21e9d3302ee18b073d" kindref="member">m_polsites</ref>[i];</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/><ref refid="classlibcppe_1_1_multipole_fields_1ae91773e2c5684d17b3cd765eb53df020" kindref="member">m_potentials</ref>.size();<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlibcppe_1_1_potential" kindref="compound">Potential</ref><sp/>&amp;potential2<sp/>=</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlibcppe_1_1_multipole_fields_1ae91773e2c5684d17b3cd765eb53df020" kindref="member">m_potentials</ref>[j];<sp/><sp/></highlight><highlight class="comment">//<sp/>all<sp/>other<sp/>multipoles<sp/>create<sp/>el.<sp/>field<sp/>at<sp/>site<sp/>i</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(potential1.<ref refid="classlibcppe_1_1_potential_1af979a374a2a59be6b614bfdcc3382a54" kindref="member">index</ref><sp/>==<sp/>potential2.<ref refid="classlibcppe_1_1_potential_1af979a374a2a59be6b614bfdcc3382a54" kindref="member">index</ref>)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(potential1.<ref refid="classlibcppe_1_1_potential_1abb7d278cbd4dd1f62e58535161403901" kindref="member">excludes_site</ref>(potential2.<ref refid="classlibcppe_1_1_potential_1af979a374a2a59be6b614bfdcc3382a54" kindref="member">index</ref>))<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>diff<sp/>=</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>potential1.<ref refid="classlibcppe_1_1_potential_1ac2e845f27e6742134a1d57a5f2b66db5" kindref="member">get_site_position</ref>()<sp/>-<sp/>potential2.<ref refid="classlibcppe_1_1_potential_1ac2e845f27e6742134a1d57a5f2b66db5" kindref="member">get_site_position</ref>();</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;--<sp/>created<sp/>by<sp/>site<sp/>&quot;<sp/>&lt;&lt;<sp/>potential2.index<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;mul<sp/>:<sp/>potential2.<ref refid="classlibcppe_1_1_potential_1a71c594246d6dee1ced07b79363ce2ac3" kindref="member">get_multipoles</ref>())<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>exclude<sp/>zero<sp/>value<sp/>multipoles<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>int<sp/>non_zeros<sp/>=<sp/>std::count_if(<sp/>mul.get_values().begin(),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>mul.get_values().end(),<sp/>[](double<sp/>val){return<sp/>fabs(val)<sp/>&gt;<sp/>0.0;}<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;non-zeros:<sp/>&quot;<sp/>&lt;&lt;<sp/>non_zeros<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>(non_zeros<sp/>==<sp/>0)<sp/>continue;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::VectorXd<sp/>Fi<sp/>=<sp/><ref refid="namespacelibcppe_1ad8720df1e0ef45bf4bf85f41cefe06e4" kindref="member">multipole_derivative</ref>(</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mul.m_k,<sp/>1,<sp/>diff,<sp/>mul.get_values_vec(),<sp/>Tk_coeffs);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mult_fields(site_counter)<sp/>+=<sp/>Fi(0);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mult_fields(site_counter<sp/>+<sp/>1)<sp/>+=<sp/>Fi(1);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mult_fields(site_counter<sp/>+<sp/>2)<sp/>+=<sp/>Fi(2);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mult_fields;</highlight></codeline>
<codeline lineno="67"><highlight class="normal">}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69" refid="classlibcppe_1_1_induced_moments_1a113f328469b36d75b2eb0a1b61820017" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlibcppe_1_1_induced_moments_1a113f328469b36d75b2eb0a1b61820017" kindref="member">InducedMoments::compute</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::VectorXd<sp/>&amp;total_fields,</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::VectorXd<sp/>&amp;induced_moments,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>make_guess,</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ostream<sp/>&amp;output_stream)<sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>output_stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Running<sp/>solver<sp/>for<sp/>induced<sp/>moments.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>std::vector&lt;Eigen::MatrixXi&gt;<sp/>Tk_coeffs<sp/>=<sp/><ref refid="namespacelibcppe_1a97556873162363c2affbca8253042729" kindref="member">Tk_coefficients</ref>(5);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>guess</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(make_guess)<sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>site_counter<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;pot<sp/>:<sp/><ref refid="classlibcppe_1_1_induced_moments_1a16b4ae37194b588f414ab35aafecd354" kindref="member">m_potentials</ref>)<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pot.is_polarizable())<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>res<sp/>=</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacelibcppe_1ab3345600c4bcba48203bc9ebf0bfa26b" kindref="member">smat_vec</ref>(pot.get_polarizabilities()[0].get_values_vec(),</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>total_fields.segment(site_counter,<sp/>3),<sp/>1.0);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>induced_moments.segment(site_counter,<sp/>3)<sp/>=<sp/>res;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>site_counter<sp/>+=<sp/>3;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;induced<sp/>mom.<sp/>guess&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>induced_moments.raw_print(std::cout<sp/>&lt;&lt;<sp/>std::setprecision(10));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_iter<sp/>=<sp/><ref refid="classlibcppe_1_1_induced_moments_1a62bbb17e4f8c0654a9f19cb6952504e8" kindref="member">m_options</ref>.<ref refid="structlibcppe_1_1_pe_options_1a852703387d1b252a8cc8ab3b64bcb992" kindref="member">diis_maxiter</ref>;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>do_diis<sp/>=<sp/><ref refid="classlibcppe_1_1_induced_moments_1a62bbb17e4f8c0654a9f19cb6952504e8" kindref="member">m_options</ref>.<ref refid="structlibcppe_1_1_pe_options_1ada11154434c81e29d9f840f1bfba767e" kindref="member">do_diis</ref>;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>norm_thresh<sp/>=<sp/>std::pow(10,<sp/>-<ref refid="classlibcppe_1_1_induced_moments_1a62bbb17e4f8c0654a9f19cb6952504e8" kindref="member">m_options</ref>.<ref refid="structlibcppe_1_1_pe_options_1ad99969e65edca6881c9e2a4214a503ef" kindref="member">induced_thresh</ref>);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>diis_start_norm<sp/>=<sp/><ref refid="classlibcppe_1_1_induced_moments_1a62bbb17e4f8c0654a9f19cb6952504e8" kindref="member">m_options</ref>.<ref refid="structlibcppe_1_1_pe_options_1af76b1e9827ece57e605e19ec63dd305d" kindref="member">diis_start_norm</ref>;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iteration<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>converged<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>norm<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>diis<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>diis_maxvec<sp/>=<sp/>10;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>std::vector&lt;Eigen::VectorXd&gt;<sp/>diis_prev_moments;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>std::vector&lt;Eigen::VectorXd&gt;<sp/>diis_residuals;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>Eigen::VectorXd<sp/>diis_old_moments<sp/>=<sp/>induced_moments;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>iterations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!converged)<sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iteration<sp/>&gt;=<sp/>max_iter)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(norm<sp/>&lt;=<sp/>diis_start_norm<sp/>&amp;&amp;<sp/>iteration<sp/>&gt;<sp/>1<sp/>&amp;&amp;<sp/>!diis<sp/>&amp;&amp;<sp/>do_diis)<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>output_stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>---<sp/>Turning<sp/>on<sp/>DIIS.<sp/>---&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>diis<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>norm<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>omp<sp/>parallel<sp/>for<sp/>reduction(+<sp/>:<sp/>norm)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classlibcppe_1_1_induced_moments_1aae2b928d367a63af4db8223ebca0b23a" kindref="member">m_n_polsites</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>Ftmp<sp/>=<sp/>Eigen::Vector3d::Zero();</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>M1tmp<sp/>=<sp/>Eigen::Vector3d::Zero();</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l<sp/>=<sp/>i<sp/>*<sp/>3;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlibcppe_1_1_potential" kindref="compound">Potential</ref><sp/>&amp;pot1<sp/>=<sp/><ref refid="classlibcppe_1_1_induced_moments_1a60e60218ba44af9952a0f52d6e0c7db4" kindref="member">m_polsites</ref>[i];</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/><ref refid="classlibcppe_1_1_induced_moments_1aae2b928d367a63af4db8223ebca0b23a" kindref="member">m_n_polsites</ref>;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m<sp/>=<sp/>3<sp/>*<sp/>j;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlibcppe_1_1_potential" kindref="compound">Potential</ref><sp/>&amp;pot2<sp/>=<sp/><ref refid="classlibcppe_1_1_induced_moments_1a60e60218ba44af9952a0f52d6e0c7db4" kindref="member">m_polsites</ref>[j];</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pot1.<ref refid="classlibcppe_1_1_potential_1abb7d278cbd4dd1f62e58535161403901" kindref="member">excludes_site</ref>(pot2.<ref refid="classlibcppe_1_1_potential_1af979a374a2a59be6b614bfdcc3382a54" kindref="member">index</ref>)<sp/>||<sp/>i<sp/>==<sp/>j)<sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>diff<sp/>=</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pot2.<ref refid="classlibcppe_1_1_potential_1ac2e845f27e6742134a1d57a5f2b66db5" kindref="member">get_site_position</ref>()<sp/>-<sp/>pot1.<ref refid="classlibcppe_1_1_potential_1ac2e845f27e6742134a1d57a5f2b66db5" kindref="member">get_site_position</ref>();</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::VectorXd<sp/>T2<sp/>=<sp/><ref refid="namespacelibcppe_1a3a5eca65d4ae00dea484f437797349a6" kindref="member">Tk_tensor</ref>(2,<sp/>diff,<sp/>Tk_coeffs);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ftmp<sp/>+=<sp/><ref refid="namespacelibcppe_1ab3345600c4bcba48203bc9ebf0bfa26b" kindref="member">smat_vec</ref>(T2,<sp/>induced_moments.segment(m,<sp/>3),<sp/>1.0);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>keep<sp/>value<sp/>to<sp/>calculate<sp/>residual</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>M1tmp<sp/>=<sp/>induced_moments.segment(l,<sp/>3);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Ftmp<sp/>+=<sp/>total_fields.segment(l,<sp/>3);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>induced_moments.segment(l,<sp/>3)<sp/>=</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacelibcppe_1ab3345600c4bcba48203bc9ebf0bfa26b" kindref="member">smat_vec</ref>(pot1.<ref refid="classlibcppe_1_1_potential_1a99b850c1b1d97248769a5abf749140fc" kindref="member">get_polarizabilities</ref>()[0].get_values_vec(),<sp/>Ftmp,<sp/>1.0);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>the<sp/>residual</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>M1tmp<sp/>=<sp/>induced_moments.segment(l,<sp/>3)<sp/>-<sp/>M1tmp;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>norm<sp/>+=<sp/>M1tmp.norm();</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>diis_prev_moments.push_back(induced_moments);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(diis_prev_moments.size()<sp/>&gt;<sp/>diis_maxvec)<sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>diis_prev_moments.erase(diis_prev_moments.begin());</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>diis_residuals.push_back(induced_moments<sp/>-<sp/>diis_old_moments);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(diis_residuals.size()<sp/>&gt;<sp/>diis_maxvec)<sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>diis_residuals.erase(diis_residuals.begin());</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(diis_residuals.size()<sp/>&gt;<sp/>2<sp/>&amp;&amp;<sp/>diis)<sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>diis_size<sp/>=<sp/>diis_residuals.size()<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::MatrixXd<sp/>B<sp/>=<sp/>Eigen::MatrixXd::Zero(diis_size,<sp/>diis_size);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>diis_size;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B(i,<sp/>0)<sp/>=<sp/>-1.0;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B(0,<sp/>i)<sp/>=<sp/>-1.0;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>diis_size;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>1;<sp/>j<sp/>&lt;<sp/>diis_size;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B(i,<sp/>j)<sp/>=<sp/>diis_residuals[i<sp/>-<sp/>1].dot(diis_residuals[j<sp/>-<sp/>1]);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B(j,<sp/>i)<sp/>=<sp/>B(i,<sp/>j);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;B-matrix&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cout<sp/>&lt;&lt;<sp/>B<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::VectorXd<sp/>rhs<sp/>=<sp/>Eigen::VectorXd::Zero(diis_size);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rhs(0)<sp/>=<sp/>-1.0;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::VectorXd<sp/>weights<sp/>=<sp/>B.colPivHouseholderQr().solve(rhs);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cout<sp/>&lt;&lt;<sp/>weights<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>induced_moments.fill(0.0);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>diis_size<sp/>-<sp/>1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>induced_moments<sp/>+=<sp/>weights[i<sp/>+<sp/>1]<sp/>*<sp/>diis_prev_moments[i];</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(diis)<sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>norm<sp/>=<sp/>(induced_moments<sp/>-<sp/>diis_old_moments).norm();</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>diis_old_moments<sp/>=<sp/>induced_moments;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>output_stream<sp/>&lt;&lt;<sp/>iteration<sp/>&lt;&lt;<sp/>std::setprecision(12)</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>---<sp/>Norm:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>norm<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>calculate<sp/>based<sp/>on<sp/>iteration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(norm<sp/>&lt;<sp/>norm_thresh)<sp/>converged<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>iteration++;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!converged)<sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>converge<sp/>induced<sp/>moments.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>nrm<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/><ref refid="classlibcppe_1_1_induced_moments_1aae2b928d367a63af4db8223ebca0b23a" kindref="member">m_n_polsites</ref>;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m<sp/>=<sp/>3<sp/>*<sp/>j;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>nrm<sp/>=<sp/>(induced_moments.segment(m,<sp/>3)).norm();</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nrm<sp/>&gt;<sp/>1.0)<sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>site<sp/>=<sp/><ref refid="classlibcppe_1_1_induced_moments_1a60e60218ba44af9952a0f52d6e0c7db4" kindref="member">m_polsites</ref>[j].index;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>output_stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;WARNING:<sp/>Induced<sp/>moment<sp/>on<sp/>site<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>site</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>is<sp/>greater<sp/>than<sp/>1<sp/>a.u.!&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="202"><highlight class="normal">}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="comment">//<sp/>returns<sp/>a<sp/>vector<sp/>of<sp/>potentials<sp/>that<sp/>have<sp/>polarizabilities</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205" refid="namespacelibcppe_1a7513df43417a5cf4db9187abfd22fbea" refkind="member"><highlight class="normal">std::vector&lt;Potential&gt;<sp/><ref refid="namespacelibcppe_1a7513df43417a5cf4db9187abfd22fbea" kindref="member">get_polarizable_sites</ref>(</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;Potential&gt;<sp/>potentials)<sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/>std::vector&lt;Potential&gt;<sp/>result;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>p<sp/>:<sp/>potentials)<sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p.is_polarizable())<sp/>{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.push_back(p);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="214"><highlight class="normal">}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>libcppe</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/maxscheurer/Projects/cppe/cppe/core/electric_fields.cc"/>
  </compounddef>
</doxygen>
