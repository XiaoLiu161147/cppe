<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="multipole__expansion_8cc" kind="file" language="C++">
    <compoundname>multipole_expansion.cc</compoundname>
    <includes local="no">Eigen/Dense</includes>
    <includes refid="multipole__expansion_8hh" local="yes">multipole_expansion.hh</includes>
    <incdepgraph>
      <node id="129">
        <label>multipole_expansion.hh</label>
        <link refid="multipole__expansion_8hh"/>
        <childnode refid="130" relation="include">
        </childnode>
        <childnode refid="133" relation="include">
        </childnode>
        <childnode refid="134" relation="include">
        </childnode>
      </node>
      <node id="127">
        <label>/Users/maxscheurer/Projects/cppe/cppe/core/multipole_expansion.cc</label>
        <link refid="multipole__expansion_8cc"/>
        <childnode refid="128" relation="include">
        </childnode>
        <childnode refid="129" relation="include">
        </childnode>
      </node>
      <node id="133">
        <label>molecule.hh</label>
        <link refid="molecule_8hh"/>
        <childnode refid="132" relation="include">
        </childnode>
        <childnode refid="131" relation="include">
        </childnode>
      </node>
      <node id="134">
        <label>multipole.hh</label>
        <link refid="multipole_8hh"/>
        <childnode refid="131" relation="include">
        </childnode>
        <childnode refid="135" relation="include">
        </childnode>
        <childnode refid="132" relation="include">
        </childnode>
      </node>
      <node id="131">
        <label>Eigen/Core</label>
      </node>
      <node id="130">
        <label>math.hh</label>
        <link refid="math_8hh"/>
        <childnode refid="131" relation="include">
        </childnode>
        <childnode refid="132" relation="include">
        </childnode>
      </node>
      <node id="128">
        <label>Eigen/Dense</label>
      </node>
      <node id="132">
        <label>vector</label>
      </node>
      <node id="135">
        <label>iostream</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacelibcppe">libcppe</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;Eigen/Dense&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="multipole__expansion_8hh" kindref="compound">multipole_expansion.hh</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacelibcppe" kindref="compound">libcppe</ref><sp/>{</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>calculates<sp/>the<sp/>multipole-nuclei<sp/>interaction<sp/>energy<sp/>through<sp/>the<sp/>given<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8" refid="classlibcppe_1_1_multipole_expansion_1af90841d1325084210f6ea0cefaef2c8c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classlibcppe_1_1_multipole_expansion_1af90841d1325084210f6ea0cefaef2c8c" kindref="member">MultipoleExpansion::calculate_interaction_energy</ref>()<sp/>{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>total_energy<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/>std::vector&lt;Eigen::MatrixXi&gt;<sp/>Tk_coeffs<sp/>=<sp/><ref refid="namespacelibcppe_1a97556873162363c2affbca8253042729" kindref="member">Tk_coefficients</ref>(5);</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>npots<sp/>=<sp/><ref refid="classlibcppe_1_1_multipole_expansion_1aae43c9070e41ba0da639ddae4a3170c8" kindref="member">m_potentials</ref>.size();</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>omp<sp/>parallel<sp/>for<sp/>reduction(+<sp/>:<sp/>total_energy)<sp/>firstprivate(Tk_coeffs)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>npots;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlibcppe_1_1_potential" kindref="compound">Potential</ref><sp/>&amp;potential<sp/>=<sp/><ref refid="classlibcppe_1_1_multipole_expansion_1aae43c9070e41ba0da639ddae4a3170c8" kindref="member">m_potentials</ref>[i];</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>site_position<sp/>=<sp/>potential.<ref refid="classlibcppe_1_1_potential_1ac2e845f27e6742134a1d57a5f2b66db5" kindref="member">get_site_position</ref>();</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;multipole<sp/>:<sp/>potential.<ref refid="classlibcppe_1_1_potential_1a71c594246d6dee1ced07b79363ce2ac3" kindref="member">get_multipoles</ref>())<sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>refactor<sp/>in<sp/>math.cc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>pref<sp/>=<sp/><ref refid="namespacelibcppe_1ae68605edfeae6c5741f5ec4c17bc0e0f" kindref="member">prefactors_nuclei</ref>(multipole.m_k);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::VectorXd<sp/>pref_v<sp/>=</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Map&lt;Eigen::VectorXd&gt;(std::move(pref.data()),<sp/>pref.size());</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::VectorXd<sp/>mul_v<sp/>=<sp/>multipole.get_values_vec();</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;atom<sp/>:<sp/><ref refid="classlibcppe_1_1_multipole_expansion_1a65c9ebc58ad0dbeb3046ec48fb59c611" kindref="member">m_mol</ref>)<sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>core_position<sp/>=<sp/>atom.get_pos();</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>diff<sp/>=<sp/>core_position<sp/>-<sp/>site_position;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::VectorXd<sp/>Tsm<sp/>=<sp/><ref refid="namespacelibcppe_1a3a5eca65d4ae00dea484f437797349a6" kindref="member">Tk_tensor</ref>(multipole.m_k,<sp/>diff,<sp/>Tk_coeffs);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>total_energy<sp/>+=<sp/>pref_v.dot(mul_v.cwiseProduct(Tsm))<sp/>*<sp/>atom.charge;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>total_energy;</highlight></codeline>
<codeline lineno="32"><highlight class="normal">}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>libcppe</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/maxscheurer/Projects/cppe/cppe/core/multipole_expansion.cc"/>
  </compounddef>
</doxygen>
